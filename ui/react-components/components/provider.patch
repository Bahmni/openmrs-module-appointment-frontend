Index: ui/react-components/helper.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ui/react-components/helper.js	(revision 72e8c3d944dcd7bb45aa8065d49c1c203dc2f61d)
+++ ui/react-components/helper.js	(date 1589863252000)
@@ -34,17 +34,17 @@
     return providers && providers.filter(provider => provider.response === PROVIDER_RESPONSES.ACCEPTED);
 };
 
-export const searchFeildOnChangeHandler=(state,setState,selectedState,setSelectedState,eventChangedValue)=>{
+export const searchFieldOnChangeHandler=(state, setState, selectedState, setSelectedState, eventChangedValue)=>{
     setSelectedState([
         ...selectedState,
         eventChangedValue
       ]);
       setState(() =>
-        [...state].filter(item => item != eventChangedValue)
+        [...state].filter(item => item !== eventChangedValue)
       );
 }
 
-export const searchFeildOnRemoveHandler=(state,setState,selectedState,setSelectedState,eventChangedValue)=>{
+export const searchFieldOnRemoveHandler=(state, setState, selectedState, setSelectedState, eventChangedValue)=>{
     setSelectedState(() =>
       [...selectedState].filter(item => item.value !== eventChangedValue)
     );
Index: ui/react-components/components/Location/LocationSearch.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ui/react-components/components/Location/LocationSearch.jsx	(revision 72e8c3d944dcd7bb45aa8065d49c1c203dc2f61d)
+++ ui/react-components/components/Location/LocationSearch.jsx	(date 1589863252000)
@@ -6,7 +6,7 @@
 import {locationTagName} from "../../constants";
 import {forEach} from 'lodash';
 import Tags from "../Tags/Tags.jsx";
-import {searchFeildOnChangeHandler,searchFeildOnRemoveHandler} from '../../helper';
+import {searchFieldOnChangeHandler,searchFieldOnRemoveHandler} from '../../helper';
 
 const LocationSearch = (props) => {
 
@@ -41,9 +41,9 @@
         id: 'PLACEHOLDER_APPOINTMENT_CREATE_SEARCH_LOCATION', defaultMessage: 'Location'
     });
 
-    const onChangeHandler = eventChangedValue => searchFeildOnChangeHandler(locations,setLocations,selectedLocations,setSelectedLocations,eventChangedValue)
-    const onRemoveHandler = eventChangedValue => searchFeildOnRemoveHandler(locations,setLocations,selectedLocations,setSelectedLocations,eventChangedValue)    
-    
+    const onChangeHandler = eventChangedValue => searchFieldOnChangeHandler(locations,setLocations,selectedLocations,setSelectedLocations,eventChangedValue)
+    const onRemoveHandler = eventChangedValue => searchFieldOnRemoveHandler(locations,setLocations,selectedLocations,setSelectedLocations,eventChangedValue)
+
     return (
         <div>
         <Dropdown
Index: ui/react-components/components/AppointmentStatus/AppointmentStatus.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ui/react-components/components/AppointmentStatus/AppointmentStatus.jsx	(revision 72e8c3d944dcd7bb45aa8065d49c1c203dc2f61d)
+++ ui/react-components/components/AppointmentStatus/AppointmentStatus.jsx	(date 1589863252000)
@@ -3,7 +3,7 @@
 import Tags from "../Tags/Tags.jsx";
 import PropTypes from "prop-types";
 import { injectIntl } from "react-intl";
-import {searchFeildOnChangeHandler,searchFeildOnRemoveHandler} from '../../helper';
+import {searchFieldOnChangeHandler,searchFieldOnRemoveHandler} from '../../helper';
 import {appointmentStatusList} from '../../constants'
 
 const AppointmentStatus = props => {
@@ -30,8 +30,8 @@
     setAppointStatusOptions(appointmentStatusList);
   }, [appointmentStatusList, setAppointStatusOptions]);
 
-  const onChangeHandler = e => searchFeildOnChangeHandler(appointmentStatusOptions,setAppointStatusOptions,selectedAppointmentStatusOptions,setSelectedAppointmentStatusOptions,e)
-  const onRemoveHandler = e => searchFeildOnRemoveHandler(appointmentStatusOptions,setAppointStatusOptions,selectedAppointmentStatusOptions,setSelectedAppointmentStatusOptions,e)
+  const onChangeHandler = e => searchFieldOnChangeHandler(appointmentStatusOptions,setAppointStatusOptions,selectedAppointmentStatusOptions,setSelectedAppointmentStatusOptions,e)
+  const onRemoveHandler = e => searchFieldOnRemoveHandler(appointmentStatusOptions,setAppointStatusOptions,selectedAppointmentStatusOptions,setSelectedAppointmentStatusOptions,e)
 
   return (
     <div>
Index: ui/react-components/components/Provider/ProviderSearch.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ui/react-components/components/Provider/ProviderSearch.jsx	(revision 72e8c3d944dcd7bb45aa8065d49c1c203dc2f61d)
+++ ui/react-components/components/Provider/ProviderSearch.jsx	(date 1589863252000)
@@ -9,8 +9,8 @@
 import { getValidProviders } from "../../helper";
 import { PROVIDER_RESPONSES,availableForAppointments } from "../../constants";
 import {
-  searchFeildOnChangeHandler,
-  searchFeildOnRemoveHandler
+  searchFieldOnChangeHandler,
+  searchFieldOnRemoveHandler
 } from "../../helper";
 
 const ProviderSearch = props => {
@@ -19,9 +19,7 @@
     selectedProviders,
     onChange,
     onProviderRemove = e => onRemoveHandler(e),
-    isDisabled
-  } = props;
-  const {
+    isDisabled,
     openMenuOnClick = true,
     openMenuOnFocus = true,
     style = "",
@@ -60,16 +58,17 @@
   const [selectedProvider, setSelectedProvider] = useState([]);
 
   useEffect(() => {
-    setProviders(loadProviders());
+    loadProviders().then((providers) => {
+      setProviders(providers)
+    })
   }, []);
 
   const loadProviders = async () => {
-    const providers = await getAllProviders();
+    let providers = await getAllProviders();
     if(providers.length===undefined){
-      setProviders([])
-    }else{
-      setProviders(createDropdownOptions(providers));
+      return []
     }
+    return createDropdownOptions(providers)
   };
 
   const onProviderSelect = selectedProviderOption => {
@@ -82,7 +81,7 @@
   };
 
   const onChangeHandler = e =>
-    searchFeildOnChangeHandler(
+    searchFieldOnChangeHandler(
       providers,
       setProviders,
       selectedProvider,
@@ -90,7 +89,7 @@
       e
     );
   const onRemoveHandler = e =>
-    searchFeildOnRemoveHandler(
+    searchFieldOnRemoveHandler(
       providers,
       setProviders,
       selectedProvider,
@@ -104,7 +103,7 @@
         isDisabled={isDisabled}
         options={providers}
         placeholder={placeHolder}
-        onChange={props.onChange ? onProviderSelect : onChangeHandler}
+        onChange={onChange ? onProviderSelect : onChangeHandler}
         selectedValue={""}
         openMenuOnClick={openMenuOnClick}
         openMenuOnFocus={openMenuOnFocus}
Index: ui/react-components/components/Provider/ProviderSearch.spec.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ui/react-components/components/Provider/ProviderSearch.spec.jsx	(revision 72e8c3d944dcd7bb45aa8065d49c1c203dc2f61d)
+++ ui/react-components/components/Provider/ProviderSearch.spec.jsx	(date 1589862601000)
@@ -35,45 +35,16 @@
     });
 
     it('should call onChange when any provider is selected from dropdown', async () => {
-        const selectedProviders = [{
-            comments: null, label: "Name 1", response: "ACCEPTED", value: "8e459c7d-20e0-11e7-a53f-000c29e530d1"
-        }, {
-            comments: null, label: "Name 2", response: "ACCEPTED", value: "8e459c7d-20e0-11e7-a53f-000c29e530d2"
-        }, {
-            comments: null, label: "Name 3", response: "ACCEPTED", value: "8e459c7d-20e0-11e7-a53f-000c29e530d3"
-        }];
-        const selectedProvider = "Provider One";
+        const provider = "Provider One";
         const onChangeSpy = jest.fn();
-        const {container,getByText} = renderWithReactIntl(
-            <ProviderSearch onChange={onChangeSpy} maxAppointmentProvidersAllowed = {5}
-                            selectedProviders={selectedProviders} onProviderRemove={jest.fn()}/>);
-        // const inputBox = container.querySelector('.react-select__input input');
-        // console.log('inputBox',inputBox.value)
-        // fireEvent.click(inputBox);
-        // await wait()
-        // await waitForElement(() => (container.querySelector('.react-select__menu')));
-        // const menu = await container.querySelector('.react-select__menu')
-        // console.log(menu)
-        // const option = getByText(selectedProvider);
-        // fireEvent.click(option);
-        // expect(getAllProviders).toHaveBeenCalled();
-        // expect(onChangeSpy).toHaveBeenCalledTimes(1);
-
-        // const inputBox = container.querySelector('.react-select__input input');
-        // fireEvent.click(inputBox);
-        // await waitForElement(
-        //     () => (container.querySelector('.react-select__menu'))
-        // );
-        // const option = getByText(selectedProvider);
-        // fireEvent.click(option);
-        // let singleValue;
-        // await waitForElement(
-        //     () =>
-        //         (singleValue = container.querySelector(
-        //             '.react-select__single-value'
-        //         ))
-        // );
-        // expect(onChangeSpy).toHaveBeenCalledTimes(1);
+        const {container, getByText} = renderWithReactIntl(
+          <ProviderSearch onChange={onChangeSpy} />);
+        const inputBox = container.querySelector('.react-select__input input');
+        fireEvent.change(inputBox, {target: {value: "One"}});
+        await waitForElement(() => (container.querySelector('.react-select__menu')));
+        const selectedProvider = getByText(provider);
+        fireEvent.click(selectedProvider);
+        expect(onChangeSpy).toHaveBeenCalledTimes(1);
     });
 
     it('should render only providers with response as Accepted', async () => {
